r - W przypadku katalogów będzie to oznaczać możliwość wypisania listy plików i podkatalogów w nim umieszczonych

w - W przypadku katalogów możliwe jest tworzenie, zmiana nazwy i usuwanie plików w tym katalogu, 

x - W przypadku katalogów oznacza to dostęp do listy plików w nim zapisanych, oraz możliwość przejścia do tego katalogu, np. przez polecenie cd katalog.

set_uid - Ustawienie tego bitu na katalogu nie ma żadnego znaczenia, jest ignorowany.

set_gid - Każdy plik utworzony w katalogu z ustawionym SGID będzie miał ustawioną przynależność do grupy katalogu w którym się znajduje, a nie grupy do której należał użytkownik tworzący plik

sticky bit - program zakończeniu działania będzie nadal przechowywany w pamięci komputera (co powinno przyśpieszyć jego ponownie uruchomienie). Ustawienie bitu lepkości dla pliku lub katalogu spowoduje, że tylko jego właściciel lub ci którzy mają prawa zapisu do tego katalogu. będą mogli go usunąć

Interesting case 1: If you have write + execute permissions on a directory, you can {delete,rename} items living within even if you don't have write permission on those items. (use sticky bit to prevent this)

Interesting case 2: If you have execute (but not write) permission on a directory AND you have write permission on a file living within, you cannot delete the file (because it involves removing it from the list). However, you can erase its contents e.g. if it's a text file you can use vi to open it and delete everything. The file will still be there, but it will be empty.

PSEUDOKOD:

struct stat {
               dev_t     st_dev;         /* ID of device containing file */
               ino_t     st_ino;         /* Inode number */

               mode_t    st_mode;        /* File type and mode */

               nlink_t   st_nlink;       /* Number of hard links */

               uid_t     st_uid;         /* User ID of owner */
               gid_t     st_gid;         /* Group ID of owner */

               dev_t     st_rdev;        /* Device ID (if special file) */
               off_t     st_size;        /* Total size, in bytes */
               blksize_t st_blksize;     /* Block size for filesystem I/O */
               blkcnt_t  st_blocks;      /* Number of 512B blocks allocated */

               /* Since Linux 2.6, the kernel supports nanosecond
                  precision for the following timestamp fields.
                  For the details before Linux 2.6, see NOTES. */

               struct timespec st_atim;  /* Time of last access */
               struct timespec st_mtim;  /* Time of last modification */
               struct timespec st_ctim;  /* Time of last status change */

           #define st_atime st_atim.tv_sec      /* Backward compatibility */
           #define st_mtime st_mtim.tv_sec
           #define st_ctime st_ctim.tv_sec
           };

The mode specifies the accessibility check(s) to be performed, and is
       either the value F_OK, or a mask consisting of the bitwise OR of one
       or more of R_OK, W_OK, and X_OK.  F_OK tests for the existence of the
       file.  R_OK, W_OK, and X_OK test whether the file exists and grants
       read, write, and execute permissions, respectively.

bool my_access(struct stat *statbuf, int mode)
0. jesli statbuf == NULL i mode != 0
    return 0;
0.5 jesli statbuf == root 
    return 1;

odp = 7 & (statbuf->st_mode)
1. Jesli getuid() == statbuf->st_uid
    odp |= (700 & (statbuf->st_mode))>>6
2.else Jesli k = getgroups(0,null) pozniej list[k] = getgroups(k,wskaznik na list) i jesli 
   list[x] == statbuf->st_gid
    odp |= (70 & (statbuf->st_mode))>>3
3.else else jesli (mode & odp) == odp 
    return 1
return 0

CWICZENIA

r - czytac dirents w katalogu,

w - modyfikowac dirents

x - wejscie do podkatalogu, robic stat na zawartosci

r,w - 

r, x - stat na plikach w katalogu

w,x - creat file

